from flask import Flask, request, jsonify
import requests
import os
import base64
import logging
from PIL import Image  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û
import io              # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')

# ‚Üì –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –ü–†–Ø–ú–û –ó–î–ï–°–¨ ‚Üì
def resize_image(image_bytes, max_size=(800, 800)):
    """–£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(image_bytes))
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
        image.thumbnail(max_size, Image.Resampling.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ bytes
        output = io.BytesIO()
        image.save(output, format='JPEG', quality=85, optimize=True)
        
        logging.info(f"üìê Image resized: {len(image_bytes)} -> {len(output.getvalue())} bytes")
        return output.getvalue()
        
    except Exception as e:
        logging.error(f"‚ùå Image resize error: {e}")
        return image_bytes  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

def download_telegram_file(file_id):
    """–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram"""
    try:
        logging.info(f"üì• Downloading file: {file_id}")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º file_path
        file_info_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getFile"
        file_info_response = requests.post(file_info_url, json={"file_id": file_id})
        file_info = file_info_response.json()
        
        if not file_info['ok']:
            logging.error(f"‚ùå File info error: {file_info}")
            return None
            
        file_path = file_info['result']['file_path']
        logging.info(f"üìÅ File path: {file_path}")
        
        # 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"
        file_response = requests.get(file_url)
        
        if file_response.status_code == 200:
            logging.info(f"‚úÖ File downloaded, size: {len(file_response.content)} bytes")
            return file_response.content
        else:
            logging.error(f"‚ùå Download failed: {file_response.status_code}")
            return None
            
    except Exception as e:
        logging.error(f"‚ùå Download error: {e}")
        return None

def process_with_deepseek(image_bytes):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ DeepSeek API"""
    try:
        logging.info("üîÑ Sending to DeepSeek API...")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        
        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å —Å—Å—ã–ª–∫–æ–π
        response = requests.post(
            'https://api.deepseek.com/chat/completions',
            headers={'Authorization': f'Bearer {DEEPSEEK_API_KEY}'},
            json={
                'model': 'deepseek-chat',
                'messages': [{
                    'role': 'user',
                    'content': f'–†–∞—Å–ø–æ–∑–Ω–∞–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: data:image/jpeg;base64,{base64_image} –∏ –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON: {{"—É—á–∞—Å—Ç–æ–∫":"–∑–Ω–∞—á–µ–Ω–∏–µ","–∏–∑–¥–µ–ª–∏–µ":"–∑–Ω–∞—á–µ–Ω–∏–µ","–Ω–æ–º–µ—Ä":"–∑–Ω–∞—á–µ–Ω–∏–µ","–¥–∞—Ç–∞":"–∑–Ω–∞—á–µ–Ω–∏–µ"}}. –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - null.'
                }],
                'temperature': 0.1,
                'max_tokens': 1000
            }
        )
        
        if response.status_code == 200:
            result = response.json()
            logging.info(f"‚úÖ DeepSeek response received")
            
            if 'choices' in result and len(result['choices']) > 0:
                message_content = result['choices'][0]['message']['content']
                logging.info(f"üìÑ DeepSeek content: {message_content}")
                return message_content
            
        logging.error(f"‚ùå DeepSeek API error: {response.status_code} - {response.text}")
        return None
            
    except Exception as e:
        logging.error(f"‚ùå DeepSeek processing error: {e}")
        return None

def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text
        }
        response = requests.post(url, json=payload)
        return response.json()
    except Exception as e:
        logging.error(f"‚ùå Telegram send error: {e}")
        return None

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logging.info("üîî WEBHOOK CALLED!")
        data = request.json
        
        if 'message' in data:
            chat_id = data['message']['chat']['id']
            user_name = data['message']['from'].get('first_name', 'User')
            
            if 'photo' in data['message']:
                logging.info(f"üñºÔ∏è Photo from {user_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
                photo = data['message']['photo'][-1]
                file_id = photo['file_id']
                logging.info(f"üì∏ File ID: {file_id}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                image_data = download_telegram_file(file_id)
                if image_data:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek
                    deepseek_result = process_with_deepseek(image_data)
                    
                    if deepseek_result:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        send_telegram_message(chat_id, f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:\n{deepseek_result}")
                        return jsonify({"status": "success", "message": "–§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"})
                    else:
                        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                        return jsonify({"status": "error", "message": "DeepSeek processing failed"})
                else:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
                    return jsonify({"status": "error", "message": "File download failed"})
            else:
                text = data['message'].get('text', '')
                logging.info(f"üí¨ Text from {user_name}: {text}")
                send_telegram_message(chat_id, f"üìù –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
                return jsonify({"status": "success", "message": "Text processed"})
        
        return jsonify({"status": "success"})
        
    except Exception as e:
        logging.error(f"‚ùå Webhook error: {e}")
        return jsonify({"status": "error"}), 200

@app.route('/health', methods=['GET'])
def health():
    return jsonify({
        "status": "running", 
        "message": "üöÄ Telegram Bot is running!",
        "version": "1.0"
    })

@app.route('/')
def home():
    return '''
    <h1>ü§ñ Telegram Document Recognition Bot</h1>
    <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</p>
    <ul>
        <li><a href="/health">Health Check</a></li>
        <li>Webhook: POST /webhook</li>
    </ul>
    '''

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)
